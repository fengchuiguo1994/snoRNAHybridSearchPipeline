[general]
    # each path should be absolute
    type = "CD" # type of snoRNA for input (for now only CD-box snoRNAs are implemented in 100%)
    unmapped_reads = "Absolute/Path/To/unmapped_reads.fa" # reads from experiment that were unmapped thus possibly chimeric (FASTA)
    bed_for_index = "Absolute/Path/To/mapped_reads.bed" # positions of the mapped reads in the genome (BED)
    snoRNAs = "Absolute/Path/To/snoRNAs_table.tab" # a table with snoRNAs (provided with the pipeline)
    rRNAs = "Absolute/Path/To/rRNAs.fa" # rRNA sequences (provided with the pipeline, although own can be used)
    tRNAs = "Absolute/Path/To/tRNAs.fa" # tRNA sequences (provided with the pipeline, although own can be used)
    snRNAs = "Absolute/Path/To/snRNAs.fa" # snRNA sequences (provided with the pipeline, although own can be used)
    genome = "Absolute/Path/To/Genome/" # genome directory with separate FASTA files for each considered chromosome in mapped_reads and in additional sequences (rRNAs etc.)
    model = "Absolute/Path/To/model.bin" # the model to calculate probability (provided with the pipeline)
    annotations_genes =   "Absolute/Path/To/Annotations/genes.gff3" # annotations of genes (see documentation for the format explanation)
    annotations_regions = "Absolute/Path/To/Annotations/regions.gff3" # annotations of regions (see documentation for the format explanation)
    annotations_repeats = "Absolute/Path/To/Annotations/repeats.gtf" # annotations of repeats (see documentation for the format explanation)
    template =             "Absolute/Path/To/template.sh" # a bash template for jobs - do not change
    PLEXY_bin = "Absolute/Path/To/plexy.pl"
    contrafold_binary = '/Absolute/Path/Or/Command/For/CONTRAfold' # eg. 'contrafold'
    executer = "drmaa"
    reads_per_file = 500 # number of unmapped reads to put in the split file
    anchor_length = 12 # length of the anchor (see the publication)
[tasks]
    # Each task accepts these arguments:
    #  * modules - if one is using modules on the cluster or environment. It invokes "module load" for each module
    #    listed eg. modules = Python, DRMAA, GCC
    #  * queue - the queue to be use if the cluster is used
    #  * mem_req - memory requested on the cluster via -l membycore directive
    #  * other arguments depend on the task at hand - see the documentation for more details
    #  * most of the parameters are default and work well for the models built - do not change them
    # Exemple for cluster are set for the Scicore cluster of Basel University
    [[SearchAnchors]]
        queue = short.q
        mem_req = 4G
        match = 2 # don't change if you do not know what you are doing
        mismatch = -5 # don't change if you do not know what you are doing
        gap_open = -6 # don't change if you do not know what you are doing
        gap_extend = -4 # don't change if you do not know what you are doing
    [[ ClusterReads ]]
        queue = short.q
        mem_req = 8G
        overlap = 1 # don't change if you do not know what you are doing
        cluster_size = 2 # don't change if you do not know what you are doing
        expand_cluster = 5 # don't change if you do not know what you are doing
    [[ MakeFastaFromClusters ]]
        queue = short.q
        mem_req = 4G
    [[ BuildBowtieIndex ]]
        queue = short.q
        mem_req = 8G
    [[ ConvertToFasta ]]
        queue = short.q
        mem_req = 4G
        length = 15 # don't change if you do not know what you are doing
        five_prime_adapter = "NNNNNNN" # The sequence of 5' adapter sequence used in sequencing
    [[ MapReads ]]
        queue = short.q
        mem_req = 4G
    [[ FilterMapped ]]
        queue = short.q
        mem_req = 4G
    [[ ConvertToBed ]]
        queue = short.q
        mem_req = 4G
    [[ FilterBed ]]
        queue = short.q
        mem_req = 4G
    [[ GetTrueChromosome ]]
        queue = short.q
        mem_req = 4G
    [[ AppendSequence ]]
        queue = short.q
        mem_req = 4G
        sequence_length = 50 # don't change if you do not know what you are doing
    [[ AppendPLEXY ]]
        queue = short.q
        mem_req = 4G
        sequence_length = 50 # don't change if you do not know what you are doing
    [[ AppendRNAduplex ]]
        queue = short.q
        mem_req = 4G
        sequence_length = 50 # don't change if you do not know what you are doing
    [[ CalculateCONTRAFold ]]
        queue = short.q
        mem_req = 4G
    [[ CalculateFlanks ]]
        queue = short.q
        mem_req = 4G
    [[ CalculateProbability ]]
        queue = short.q
        mem_req = 4G
    [[ AnnotateResults ]]
        queue = short.q
        mem_req = 6G
